// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TransportSystem.Models;

#nullable disable

namespace TransportSystem.Migrations
{
    [DbContext(typeof(TransportSystemContext))]
    [Migration("20231123203052_EditTrucks")]
    partial class EditTrucks
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");

            modelBuilder.Entity("Driverlicensecategory", b =>
                {
                    b.Property<int>("LicenseId")
                        .HasColumnType("int")
                        .HasColumnName("LicenseID");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    b.HasKey("LicenseId", "CategoryId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "LicenseId" }, "driverlicensecategories_ibfk_1_idx");

                    b.HasIndex(new[] { "CategoryId" }, "licenses_driverlicensecategories_id_idx");

                    b.ToTable("driverlicensecategories", (string)null);
                });

            modelBuilder.Entity("Drivertrip", b =>
                {
                    b.Property<int>("TripId")
                        .HasColumnType("int")
                        .HasColumnName("TripID");

                    b.Property<int>("DriverId")
                        .HasColumnType("int")
                        .HasColumnName("DriverID");

                    b.HasKey("TripId", "DriverId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "DriverId" }, "trip_drivers_driver_id_idx");

                    b.HasIndex(new[] { "TripId" }, "trip_drivers_trip_id_idx");

                    b.ToTable("trip_drivers", (string)null);
                });

            modelBuilder.Entity("TransportSystem.Models.Accounting", b =>
                {
                    b.Property<int>("OperationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OperationID");

                    b.Property<int>("OperationAgentId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("OperationDate")
                        .HasColumnType("date");

                    b.Property<string>("OperationDescription")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("OperationName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<int>("OperationTotal")
                        .HasColumnType("int");

                    b.HasKey("OperationId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "OperationAgentId" }, "accounting_agent_id_idx");

                    b.ToTable("accounting", (string)null);
                });

            modelBuilder.Entity("TransportSystem.Models.Agent", b =>
                {
                    b.Property<int>("AgentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AgentAccount")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("AgentAddress")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("AgentEdrpou")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("AgentEDRPOU");

                    b.Property<string>("AgentEmail")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("AgentIpn")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("AgentIPN");

                    b.Property<string>("AgentName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("AgentPhone")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("AgentId")
                        .HasName("PRIMARY");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.HasIndex(new[] { "AgentAccount" }, "AgentAccount_UNIQUE")
                        .IsUnique();

                    b.HasIndex(new[] { "AgentEdrpou" }, "AgentEDRPOU_UNIQUE")
                        .IsUnique();

                    b.HasIndex(new[] { "AgentName" }, "AgentName_UNIQUE")
                        .IsUnique();

                    b.ToTable("agents", (string)null);
                });

            modelBuilder.Entity("TransportSystem.Models.DeliveryLog", b =>
                {
                    b.Property<int>("DeliveryLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("LogOperationDescription")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("LogOperationLocationCity")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("LogOperationName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<DateTime>("OperationDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("TripId")
                        .HasColumnType("int");

                    b.HasKey("DeliveryLogId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "TripId" }, "log_trip_id_idx");

                    b.ToTable("deliverylog", (string)null);
                });

            modelBuilder.Entity("TransportSystem.Models.Driver", b =>
                {
                    b.Property<int>("DriverId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DriverID");

                    b.Property<DateOnly>("DriverBirthday")
                        .HasColumnType("date");

                    b.Property<string>("DriverIndividualTaxNumber")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("varchar(12)");

                    b.Property<string>("DriverName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("DriverNationality")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("DriverPatronymic")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("DriverPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("DriverSurname")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("DriversPassportNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("DriverId")
                        .HasName("PRIMARY");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.HasIndex(new[] { "DriverIndividualTaxNumber" }, "DriverIndividualTaxNumber_UNIQUE")
                        .IsUnique();

                    b.HasIndex(new[] { "DriverPhoneNumber" }, "DriverPhoneNumber_UNIQUE")
                        .IsUnique();

                    b.HasIndex(new[] { "DriversPassportNumber" }, "DriversPassportNumber_UNIQUE")
                        .IsUnique();

                    b.ToTable("drivers", (string)null);
                });

            modelBuilder.Entity("TransportSystem.Models.DriverContract", b =>
                {
                    b.Property<int>("ContractId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ContractID");

                    b.Property<int>("ContractDriverId")
                        .HasColumnType("int")
                        .HasColumnName("ContractDriverID");

                    b.Property<DateOnly?>("ContractExpiryDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("ContractIssueDate")
                        .HasColumnType("date");

                    b.Property<int>("ContractNumber")
                        .HasColumnType("int");

                    b.HasKey("ContractId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ContractNumber" }, "DriverContractNumber_UNIQUE")
                        .IsUnique();

                    b.HasIndex(new[] { "ContractDriverId" }, "contract_driver_id_idx");

                    b.ToTable("drivercontract", (string)null);
                });

            modelBuilder.Entity("TransportSystem.Models.DriverLicense", b =>
                {
                    b.Property<int>("LicenseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LicenseID");

                    b.Property<int?>("DriverId")
                        .HasColumnType("int")
                        .HasColumnName("DriverID");

                    b.Property<DateOnly?>("ExpirationDate")
                        .HasColumnType("date");

                    b.Property<string>("LicenseNumber")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("LicenseId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "DriverId" }, "DriverID");

                    b.ToTable("driverlicenses", (string)null);
                });

            modelBuilder.Entity("TransportSystem.Models.LicenseCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    b.Property<string>("CategoryCode")
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("CategoryDescription")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("CategoryId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CategoryCode" }, "CategoryCode_UNIQUE")
                        .IsUnique();

                    b.HasIndex(new[] { "CategoryDescription" }, "CategoryDescription_UNIQUE")
                        .IsUnique();

                    b.ToTable("licensecategories", (string)null);
                });

            modelBuilder.Entity("TransportSystem.Models.Trailer", b =>
                {
                    b.Property<int>("TrailerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("TrailerCapacity")
                        .HasColumnType("int");

                    b.Property<string>("TrailerModel")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("TrailerNumberPlate")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("TrailerType")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("TrailerTyresType")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("TrailerVendor")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("TrailerWeight")
                        .HasColumnType("int");

                    b.HasKey("TrailerId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "TrailerNumberPlate" }, "TrailerNumberPlate_UNIQUE")
                        .IsUnique();

                    b.ToTable("trailers", (string)null);
                });

            modelBuilder.Entity("TransportSystem.Models.TransportInsurance", b =>
                {
                    b.Property<int>("TransportInsuranceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<int>("InsuranceAgentId")
                        .HasColumnType("int")
                        .HasColumnName("InsuranceAgentID");

                    b.Property<int?>("InsuranceTrailerId")
                        .HasColumnType("int")
                        .HasColumnName("InsuranceTrailerID");

                    b.Property<int?>("InsuranceTruckId")
                        .HasColumnType("int")
                        .HasColumnName("InsuranceTruckID");

                    b.Property<string>("PolicyNumber")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("TransportInsuranceId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "InsuranceAgentId" }, "insurance_agent_id_idx");

                    b.HasIndex(new[] { "InsuranceTrailerId" }, "insurance_trailer_id_idx");

                    b.HasIndex(new[] { "InsuranceTruckId" }, "insurance_truck_id_idx");

                    b.ToTable("transportinsurance", (string)null);
                });

            modelBuilder.Entity("TransportSystem.Models.Trip", b =>
                {
                    b.Property<int>("TripId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TripID");

                    b.Property<int>("TripAgentId")
                        .HasColumnType("int")
                        .HasColumnName("TripAgentID");

                    b.Property<string>("TripCargoName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateOnly?>("TripCompletion")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("TripDeparture")
                        .HasColumnType("date");

                    b.Property<string>("TripName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("TripTotal")
                        .HasColumnType("int");

                    b.Property<int>("TripTrailerId")
                        .HasColumnType("int")
                        .HasColumnName("TripTrailerID");

                    b.Property<int>("TripTruckId")
                        .HasColumnType("int")
                        .HasColumnName("TripTruckID");

                    b.HasKey("TripId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "TripAgentId" }, "trip_agent_id_idx");

                    b.HasIndex(new[] { "TripTrailerId" }, "trip_trailer_id_idx");

                    b.HasIndex(new[] { "TripTruckId" }, "trip_truck_id_idx");

                    b.ToTable("trips", (string)null);
                });

            modelBuilder.Entity("TransportSystem.Models.Truck", b =>
                {
                    b.Property<int>("TruckId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("TruckEcoStandartEuro")
                        .HasColumnType("int");

                    b.Property<string>("TruckFrontTyresType")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("TruckFuelType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("TruckModel")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("TruckNumberPlate")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("TruckRearTyresType")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("TruckVendor")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("TruckWeight")
                        .HasColumnType("int");

                    b.HasKey("TruckId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "TruckNumberPlate" }, "TruckNumberPlate_UNIQUE")
                        .IsUnique();

                    b.ToTable("trucks", (string)null);
                });

            modelBuilder.Entity("TransportSystem.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("enum('agent','driver','administrator')");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("UserId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Username" }, "Username_UNIQUE")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Driverlicensecategory", b =>
                {
                    b.HasOne("TransportSystem.Models.LicenseCategory", null)
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("licenses_driverlicensecategories_id");

                    b.HasOne("TransportSystem.Models.DriverLicense", null)
                        .WithMany()
                        .HasForeignKey("LicenseId")
                        .IsRequired()
                        .HasConstraintName("driverlicensecategories_ibfk_1");
                });

            modelBuilder.Entity("Drivertrip", b =>
                {
                    b.HasOne("TransportSystem.Models.Driver", null)
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .IsRequired()
                        .HasConstraintName("trip_drivers_driver_id");

                    b.HasOne("TransportSystem.Models.Trip", null)
                        .WithMany()
                        .HasForeignKey("TripId")
                        .IsRequired()
                        .HasConstraintName("trip_drivers_trip_id");
                });

            modelBuilder.Entity("TransportSystem.Models.Accounting", b =>
                {
                    b.HasOne("TransportSystem.Models.Agent", "OperationAgent")
                        .WithMany("Accounting")
                        .HasForeignKey("OperationAgentId")
                        .IsRequired()
                        .HasConstraintName("accounting_agent_id");

                    b.Navigation("OperationAgent");
                });

            modelBuilder.Entity("TransportSystem.Models.Agent", b =>
                {
                    b.HasOne("TransportSystem.Models.User", "User")
                        .WithOne("Agent")
                        .HasForeignKey("TransportSystem.Models.Agent", "UserId")
                        .IsRequired()
                        .HasConstraintName("agent_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TransportSystem.Models.DeliveryLog", b =>
                {
                    b.HasOne("TransportSystem.Models.Trip", "Trip")
                        .WithMany("DeliveryLog")
                        .HasForeignKey("TripId")
                        .IsRequired()
                        .HasConstraintName("log_trip_id");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("TransportSystem.Models.Driver", b =>
                {
                    b.HasOne("TransportSystem.Models.User", "User")
                        .WithOne("Driver")
                        .HasForeignKey("TransportSystem.Models.Driver", "UserId")
                        .IsRequired()
                        .HasConstraintName("driver_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TransportSystem.Models.DriverContract", b =>
                {
                    b.HasOne("TransportSystem.Models.Driver", "ContractDriver")
                        .WithMany("DriverContracts")
                        .HasForeignKey("ContractDriverId")
                        .IsRequired()
                        .HasConstraintName("contract_driver_id");

                    b.Navigation("ContractDriver");
                });

            modelBuilder.Entity("TransportSystem.Models.DriverLicense", b =>
                {
                    b.HasOne("TransportSystem.Models.Driver", "Driver")
                        .WithMany("DriverLicenses")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("driverlicenses_ibfk_1");

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("TransportSystem.Models.TransportInsurance", b =>
                {
                    b.HasOne("TransportSystem.Models.Agent", "InsuranceAgent")
                        .WithMany("TransportInsurances")
                        .HasForeignKey("InsuranceAgentId")
                        .IsRequired()
                        .HasConstraintName("insurance_agent_id");

                    b.HasOne("TransportSystem.Models.Trailer", "InsuranceTrailer")
                        .WithMany("Transportinsurances")
                        .HasForeignKey("InsuranceTrailerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("insurance_trailer_id");

                    b.HasOne("TransportSystem.Models.Truck", "InsuranceTruck")
                        .WithMany("TransportInsurances")
                        .HasForeignKey("InsuranceTruckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("insurance_truck_id");

                    b.Navigation("InsuranceAgent");

                    b.Navigation("InsuranceTrailer");

                    b.Navigation("InsuranceTruck");
                });

            modelBuilder.Entity("TransportSystem.Models.Trip", b =>
                {
                    b.HasOne("TransportSystem.Models.Agent", "TripAgent")
                        .WithMany("Trips")
                        .HasForeignKey("TripAgentId")
                        .IsRequired()
                        .HasConstraintName("trip_agent_id");

                    b.HasOne("TransportSystem.Models.Trailer", "TripTrailer")
                        .WithMany("Trips")
                        .HasForeignKey("TripTrailerId")
                        .IsRequired()
                        .HasConstraintName("trip_trailer_id");

                    b.HasOne("TransportSystem.Models.Truck", "TripTruck")
                        .WithMany("Trips")
                        .HasForeignKey("TripTruckId")
                        .IsRequired()
                        .HasConstraintName("trip_truck_id");

                    b.Navigation("TripAgent");

                    b.Navigation("TripTrailer");

                    b.Navigation("TripTruck");
                });

            modelBuilder.Entity("TransportSystem.Models.Agent", b =>
                {
                    b.Navigation("Accounting");

                    b.Navigation("TransportInsurances");

                    b.Navigation("Trips");
                });

            modelBuilder.Entity("TransportSystem.Models.Driver", b =>
                {
                    b.Navigation("DriverContracts");

                    b.Navigation("DriverLicenses");
                });

            modelBuilder.Entity("TransportSystem.Models.Trailer", b =>
                {
                    b.Navigation("Transportinsurances");

                    b.Navigation("Trips");
                });

            modelBuilder.Entity("TransportSystem.Models.Trip", b =>
                {
                    b.Navigation("DeliveryLog");
                });

            modelBuilder.Entity("TransportSystem.Models.Truck", b =>
                {
                    b.Navigation("TransportInsurances");

                    b.Navigation("Trips");
                });

            modelBuilder.Entity("TransportSystem.Models.User", b =>
                {
                    b.Navigation("Agent")
                        .IsRequired();

                    b.Navigation("Driver")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
